
chunk             ::= stmt* EOF

stmt              ::= block
                    | let_decl
                    | assign_stmt
                    | fn_decl
                    | if_stmt
                    | loop_stmt
                    | while_stmt
                    | do_while_stmt
                    | break_stmt
                    | continue_stmt
                    | return_stmt
                    | expr_stmt

block             ::= "{" stmt* "}"

let_decl          ::= "let" ( destruct_elements | destruct_fields ) | ( IDENT ( "=" expr )? ) ";"

destruct_elements ::= "[" ident_list "]" "=" expr

ident_list        ::= IDENT ( "," IDENT )*

destruct_fields   ::= "{" ident_list "}" "=" expr

assign_stmt       ::= "&" IDENT ( "=" expr | assign_op expr | assign_stmt_cont ) ";"

assign_op         ::= "+=" | "-=" | "*=" | "/=" | "%="

assign_stmt_cont  ::= ( "[" expr "]" | "." IDENT ) ( "=" expr | assign_op expr | assign_stmt_cont )

fn_decl           ::= "fn" IDENT params block

params            ::= "(" ( IDENT ( "," IDENT )* )? ")"

if_stmt           ::= "if" let_decl? expr block if_stmt_cont

if_stmt_cont      ::= ( "else" ( if_stmt | block ) )?

loop_stmt         ::= "loop" block

while_stmt        ::= "while" let_decl? expr block

do_while_stmt     ::= "do" block "while" expr ";"

break_stmt        ::= "break" ";"

continue_stmt     ::= "continue" ";"

return_stmt       ::= "return" expr? ";"

expr_stmt         ::= expr ";"

expr              ::= and_expr expr_cont

expr_cont         ::= ( "||" and_expr expr_cont )?

and_expr          ::= eq_expr and_expr_cont

and_expr_cont     ::= ( "&&" eq_expr and_expr_cont )?

eq_expr           ::= cmp_expr ( ( "==" | "!=" ) cmp_expr )*

cmp_expr          ::= range_expr ( ( ">=" | ">" | "<=" | "<" ) range_expr )*

range_expr        ::= add_expr ( ".." add_expr )?

add_expr          ::= mul_expr ( ( "+" | "-" ) mul_expr )*

mul_expr          ::= unary_expr ( ( "*" | "/" | "%" ) unary_expr )*

unary_expr        ::= ( "!" | "-" )? unary_expr | call_expr

call_expr         ::= prim_expr ( call | subscr )*

call              ::= "(" expr_list? ")"

expr_list         ::= expr ( "," expr )*

subscr            ::= "[" expr "]" | "." IDENT

prim_expr         ::= "nil" | "false" | "true" | NUMBER | STRING | IDENT
                    | array
                    | record
                    | fn
                    | if_expr
                    | group

array             ::= "[" expr_list? "]"

record            ::= "{" ( field ( "," field )* )? "}"

field             ::= IDENT ":" expr

fn                ::= "fn" params block

if_expr           ::= "if" expr block_expr if_expr_cont

block_expr        ::= "{" expr "}"

if_expr_cont      ::= ( "else" ( if_expr | block_expr ) )?

group             ::= "(" expr ")"
