
- test: function declaration - empty
  source: |
    fn f() {}
    let a = f();
    println(a); 
  out: |
    nil

- test: function declaration - return value
  source: |
    fn f() {
      return 10;
    }
    let a = f();
    println(a); 
  out: |
    10

- test: function declaration - with arguments
  source: |
    fn f(a, b) {
      return a + b;
    }
    let a = f(10, 20);
    println(a); 
  out: |
    30

- test: function declaration - with arguments and local variable
  source: |
    fn f(a, b) {
      let c = 30;
      return a + b + c;
    }
    let a = f(10, 20);
    println(a); 
  out: |
    60

- test: function declaration - recursion
  source: |
    fn f(n) {
      if n == 0 {
        return 1;
      }
      return n * f(n - 1);
    }
    let a = f(5);
    println(a);
  out: |
    120
- test: function declaration - tail recursion
  source: |
    fn f(n, a) {
      if n == 0 {
        return a;
      }
      return f(n - 1, a + 1);
    }
    let a = f(127, 1);
    println(a);
  out: |
    128

- test: anonymous function - empty
  source: |
    println(fn () {} ());
  out: |
    nil

- test: anonymous function - let statement
  source: |
    let f = fn (a, b) {
      return a + b;
    };
    let a = f(10, 20);
    println(a); 
  out: |
    30

- test: anonymous function - passing as argument
  source: |
    let add = fn (a, b) {
      return a + b;
    };
    let apply = fn (f, a, b) {
      return f(a, b);
    };
    let a = apply(add, 10, 20);
    println(a);
  out: |
    30

- test: anonymous function - returning a function
  source: |
    let adder = fn () {
      return fn (x, y) {
        return x + y;
      };
    };
    let add = adder();
    println(add(10, 20));
  out: |
    30

- test: Println a function
  source: |
    fn adder (x, y) {
      return x + y;
    }
    println(adder);
  out:
    regex: "^<closure 0x"
